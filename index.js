const Discord = require('discord.js');
const { Client, MessageActionRow, MessageButton } = require('discord.js');
const config = require('./config.json');
const { keepAlive, TextImageRedirect } = require('./server');
const fs = require('fs');
const { setTimeout } = require('timers/promises');
config.cfg.intents = new Discord.Intents(config.cfg.intents);
const client = new Discord.Client(config.cfg);

// –°–æ–∑–¥–∞–µ–º map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π
const messagesMap = new Map();
module.exports = messagesMap;

client.on('ready', () => {
    fs.writeFileSync('status.json', JSON.stringify({ isProcessing: false }), 'utf8');
    console.log(`–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ map
    setInterval(() => {
        const status = JSON.parse(fs.readFileSync('status.json', 'utf8'));

        if (!status.isProcessing && messagesMap.size > 0) {
            const key = Array.from(messagesMap.keys())[0]; // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ map
            const value = messagesMap.get(key); // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ map

            TextImageRedirect(value.message, value.content, value.userId)
                .then(() => {
                    messagesMap.delete(key); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ map –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                });
        }
    }, 2000);

    setInterval(async() => {
        if (messageToDelete && Date.now() - messageToDelete.timestamp >= 7000) { // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 7 —Å–µ–∫—É–Ω–¥
            try {
                let m = await client.channels.cache.get(messageToDelete.channelId).messages.fetch(messageToDelete.id); // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                m.delete(); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                messageToDelete = null; // –û–±–Ω—É–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
        }
    }, 1000);

});

client.login(config.token);

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

let messageToDelete = null;

client.on('messageCreate', async message => {
    try {
        if (message.author.bot) return; // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è - –±–æ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        if (!message.content.replace(/<(.|\n)*?>/g, '').trim()) {
            return;
        } else if (message.content.includes('@here') || message.content.includes('@everyone')) {
            return;
        } else if (message.content.startsWith('..') || message.mentions.has(client.user.id)) {
            const allowedGuilds = ['878760224499044433', '262883583428001792', '987163603926925332'];

            if (!allowedGuilds.includes(message.guild.id)) return;
            // console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏');

            // if (!message.content.includes('--sd') || !message.content.includes('--bg')) {
            //     TextImageRedirect(message, message.content, message.userId);
            //     return;
            // }

            // –ï—Å–ª–∏ –≤ map –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥


            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ map
            messagesMap.set(message.id, { message: message, content: message.content, userId: message.author.id });


            fs.writeFileSync('mapSize.json', JSON.stringify({ size: messagesMap.size }), 'utf8');

            await message.reply(`–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`).then(m => {
                messageToDelete = { id: m.id, channelId: m.channel.id, timestamp: Date.now() }; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, ID –∫–∞–Ω–∞–ª–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            });
            message.channel.sendTyping();

        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handleMessage:', err);
    }
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    // –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π row —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const row = new MessageActionRow()
        .addComponents(
            new MessageButton()
            .setCustomId("style-1")
            .setLabel('–°—Ç–∏–ª—å 1')
            .setStyle(interaction.customId === "style-1" ? 'SUCCESS' : 'SECONDARY')
            .setDisabled(interaction.customId !== "style-1"),
            new MessageButton()
            .setCustomId("style-2")
            .setLabel('–°—Ç–∏–ª—å 2')
            .setStyle(interaction.customId === "style-2" ? 'SUCCESS' : 'SECONDARY')
            .setDisabled(interaction.customId !== "style-2"),
            new MessageButton()
            .setCustomId("style-3")
            .setLabel('–°—Ç–∏–ª—å 3')
            .setStyle(interaction.customId === "style-3" ? 'SUCCESS' : 'SECONDARY')
            .setDisabled(interaction.customId !== "style-3"),
            new MessageButton()
            .setCustomId("style-4")
            .setLabel('–°—Ç–∏–ª—å 4')
            .setStyle(interaction.customId === "style-4" ? 'SUCCESS' : 'SECONDARY')
            .setDisabled(interaction.customId !== "style-4"),
            new MessageButton()
            .setCustomId("stable-dif")
            .setLabel('–û–±–Ω–æ–≤–∏—Ç—å')
            .setEmoji('üîÑ')
            .setStyle('SECONDARY'),
        );
    // –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π row —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const row2 = new MessageActionRow()
        .addComponents(
            new MessageButton()
            .setCustomId("sd")
            .setLabel('Stable Diffusion')
            .setStyle(interaction.customId === "sd" ? 'SUCCESS' : 'SECONDARY')
            .setDisabled(interaction.customId !== "sd"),
            new MessageButton()
            .setCustomId("xd")
            .setLabel('Bing')
            .setStyle(interaction.customId === "bg" ? 'SUCCESS' : 'SECONDARY')
            .setDisabled(interaction.customId !== "bg"),

        );

    try {
        if (interaction.isButton()) {
            // interaction.message.channel.sendTyping();
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π
            // await interaction.deferUpdate();

            const inId = interaction.user.id;

            if (interaction.message instanceof Discord.Message) {


                if (interaction.message instanceof Discord.Message) {
                    try {
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é –≤ map
                        messagesMap.set(interaction.id, { message: interaction.message, content: interaction.message.content, userId: inId });

                    } catch (err) {
                        //console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏:', err);
                    }

                    if (interaction.customId === 'style-1') {
                        const newContent = updateContent(interaction.message.content, '--v1');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ 1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    } else if (interaction.customId === 'style-2') {
                        const newContent = updateContent(interaction.message.content, '--v2');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ 2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    } else if (interaction.customId === 'style-3') {
                        const newContent = updateContent(interaction.message.content, '--v3');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ 3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    } else if (interaction.customId === 'style-4') {
                        const newContent = updateContent(interaction.message.content, '--v4');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ 4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    } else if (interaction.customId === 'sd') {
                        const newContent = updateContent(interaction.message.content, '--sd');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ stable diffusion. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    } else if (interaction.customId === 'bg') {
                        const newContent = updateContent(interaction.message.content, '--bg');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ Bing. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    } else if (interaction.customId === 'stable-dif') {
                        const newContent = updateContent(interaction.message.content, '');
                        await interaction.update({
                            components: [row, row2],
                            content: newContent
                        });
                        await interaction.followUp({ content: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ "${interaction.message.content}" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 17 —Å–µ–∫—É–Ω–¥, –¥–æ 3 –º–∏–Ω—É—Ç!\n–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ${messagesMap.size}`, ephemeral: true });
                    }

                }

            }



        }

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handleInteraction:', err);
    }
});


function updateContent(content, suffix) {
    const matches = content.match(/(--v1|--v2|--v3|--v4)/g);
    if (matches && matches.length > 1) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        content = content.replace(/(--v1|--v2|--v3|--v4)/g, '');
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—É—Ñ—Ñ–∏–∫—Å
        content += ' ' + suffix;
    } else if (!matches) {
        // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        content += ' ' + suffix;
    }
    return content;
}


keepAlive();
